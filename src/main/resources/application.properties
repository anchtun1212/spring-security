server.port=8097

#datasource
#This is not a production recommended approach, like directly mentioning your database credentials, 
#always your DevOps team. They will try to inject these credentials as an environmental variables through the 
#CI/CD pipelines build tools like Jenkins
spring.datasource.url=jdbc:postgresql://localhost:5432/springdb
spring.datasource.username=springuser
spring.datasource.password=springpass
spring.datasource.driver-class-name=org.postgresql.Driver

spring.jpa.hibernate.ddl-auto=none

#use static username and password: could be used for POC
#spring.security.user.name=mohamed
#spring.security.user.password=mohamed1

#liquibase
spring.liquibase.change-log=classpath:db/changelog/db.changelog-master.xml

# to check registred filters inside Spring Security NOT RECOMENDED FOR PROD
#logging.level.org.springframework.security.web.FilterChainProxy=DEBUG

# spring-security-dev: is the realm that I created for our application
# This is the URL of Keycloak Auth server from where my resource server can download the public certificate
# What will happen is, behind the scenes, my resource server during the startup, it'll download the public certificate
# by connecting to the authorization server. So my authorization server will have a private certificate, or private key, using which,
# it is going to digitally sign all my access token, ID tokens. And my resource server, with the help of public certificate,
# it can validate if the token is tampered by someone or not, if the token is valid or not.
# This way, my resource server don't have to connect with the Auth server whenever it want to validate a given access token.
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8094/realms/spring-security-dev/protocol/openid-connect/certs
